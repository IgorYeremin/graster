component stream "stream timed pulses to the steppers asynchronously";
license "fuck";

param rw float position_scale = 1.0;
param rw float maxaccel = 1.0;

pin in bit read                "set true to read new values from input pins, false to ignore inputs and keep existing values";

pin in float move_to           "POS parameter for operation";
pin in float speed             "VEL parameter for operation";
pin in float boundary          "arbitrary test boundary";
pin in unsigned test           "0: always false, 1: always true, 2: moving, 3: not moving, 4: <= boundary, 5: >= boundary";

variable float vmove_to;
variable float vspeed;
variable float vboundary;
variable unsigned vtest;

pin in float position_fb       "set to actual axis position, as reported by stepgen";

pin out float velocity_cmd     "the value we want for velocity, sent to stepgen";
pin out bit test_result        "result of specified test";
pin out bit moving             "1 if moving";
pin out bit greater            "1 if position is >= boundary";
pin out bit less               "1 if position is <= boundary";

function _ fp;
;;

#include <rtapi_math.h>

FUNCTION(_) {
  float move_delta, step_size, velocity;

  if (read) {
    vmove_to = move_to;
    vspeed = speed;
    vboundary = boundary;
    vtest = test;
  }

  move_delta = vmove_to - position_fb;
  step_size = 1.0/(position_scale == 0.0 ? 1.0 : position_scale);

  /* find velocity given distance and acceleration: v = (2ad)^(1/2) */
  velocity = min((float)sqrt(2.0 * fabs(move_delta) * maxaccel), vspeed);

  if (fabs(move_delta) >= step_size) {
    velocity_cmd = move_delta < 0.0 ? -velocity : velocity;
    moving = 1;
  } else {
    velocity_cmd = moving = 0;
  }

  greater = position_fb >= vboundary;
  less = position_fb < vboundary;

  test_result = (vtest == 1) ||
                (vtest == 2 && moving) ||
                (vtest == 3 && less) ||
                (vtest == 4 && greater) ? 1 : 0;
}
