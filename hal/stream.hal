
loadrt probe_parport
loadrt hal_parport cfg=0x378
setp parport.0.reset-time 100000

loadrt charge_pump
net charge-pump charge-pump.out parport.0.pin-17-out
setp parport.0.pin-17-out-reset 1
setp charge-pump.enable 1

net amp parport.0.pin-14-out
sets amp 1

net x-home <= parport.0.pin-10-in
net y-home <= parport.0.pin-12-in
net estop-ext <= parport.0.pin-15-in

# FIFO input component
# beam xpos xop xarg ypos yop yarg
#
# beam:    0=off 1=on
# ?pos:    target position
# ?op:     compare operation 0=less-or-equal 1=greater-or-equal
# ?arg:    compare operand

loadrt streamer depth=256 cfg="bfbffbf"
net beam-enable    <= streamer.0.pin.0
net x-velocity-cmd <= streamer.0.pin.1
net x-cmp-op       <= streamer.0.pin.2
net x-cmp-val      <= streamer.0.pin.3
net x-cmp-bypass   <= streamer.0.pin.4
net y-velocity-cmd <= streamer.0.pin.5
net y-cmp-op       <= streamer.0.pin.6
net y-cmp-val      <= streamer.0.pin.7
net y-cmp-bypass   <= streamer.0.pin.8
net input-empty    <= streamer.0.empty
net input-latch => streamer.0.enable

# Make sure velocity is zero when we are not executing a command and input FIFO is empty
loadrt mux2 count=2
loadrt and2 count=2

net input-empty => and2.0.in0
net input-latch => and2.0.in1
net idle <= and2.0.out

net x-velocity-cmd => mux2.0.in0
net zero => mux2.0.in1
net idle => mux2.0.sel
net x-velocity <= mux2.0.out

net y-velocity-cmd => mux2.1.in0
net zero => mux2.1.in1
net idle => mux2.1.sel
net y-velocity <= mux2.1.out

sets zero 0.0

# Connect beam on/off to FIFO field 0
net beam-enable => parport.0.pin-01-out

# Setup x,y step generators
# Connect x,y target-pos to FIFO fields 1,4
loadrt stepgen step_type=0,0 ctrl_type=v,v

setp stepgen.0.position-scale 500
setp stepgen.0.steplen 15200
setp stepgen.0.stepspace 15200
setp stepgen.0.dirhold 15200
setp stepgen.0.dirsetup 15200
setp stepgen.0.maxaccel 20
setp stepgen.0.maxvel 4
setp stepgen.0.enable 1
net x-dir stepgen.0.dir parport.0.pin-02-out
net x-step stepgen.0.step parport.0.pin-03-out
net x-velocity => stepgen.0.velocity-cmd
net x-position <= stepgen.0.position-fb

setp stepgen.1.position-scale 500
setp stepgen.1.steplen 15200
setp stepgen.1.stepspace 15200
setp stepgen.1.dirhold 15200
setp stepgen.1.dirsetup 15200
setp stepgen.1.maxaccel 20
setp stepgen.1.maxvel 5
setp stepgen.1.enable 1
net y-dir stepgen.1.dir parport.0.pin-04-out
net y-step stepgen.1.step parport.0.pin-05-out
net y-velocity => stepgen.1.velocity-cmd
net y-position <= stepgen.1.position-fb

# Wire up logic to perform compare operation and start/stop FIFO
loadrt comp count=2
loadrt or2 count=4
loadrt xor2 count=2

# x-cmp-result = x-cmp-op ? x-current-pos >= x-cmp-val : x-current-pos <= x-cmp-val
setp comp.0.hyst 0.002
net x-position => comp.0.in0
net x-cmp-val => comp.0.in1
net x-cmp-eq <= comp.0.equal
net x-cmp-lt <= comp.0.out

net x-cmp-eq => or2.0.in0
net x-cmp-lt => or2.0.in1
net x-cmp-lte <= or2.0.out         # x-cmp-lte = x-current-pos == x-target-pos || x-current-pos < x-target-pos

net x-cmp-lte => xor2.0.in0
net x-cmp-op => xor2.0.in1
net x-cmp-op-result <= xor2.0.out  # x-cmp-result = (x-cmp-lte && !x-cmp-op) || (!x-cmp-lte && x-cmp-op)

net x-cmp-op-result => or2.1.in0
net x-cmp-bypass => or2.1.in1
net x-cmp-result <= or2.1.out

# y-cmp-result = y-cmp-op ? y-current-pos >= y-cmp-val : y-current-pos <= y-cmp-val
setp comp.1.hyst 0.002
net y-position => comp.1.in0
net y-cmp-val => comp.1.in1
net y-cmp-eq <= comp.1.equal
net y-cmp-lt <= comp.1.out

net y-cmp-eq => or2.2.in0
net y-cmp-lt => or2.2.in1
net y-cmp-lte <= or2.2.out         # x-cmp-lte = x-current-pos == x-target-pos || x-current-pos < x-target-pos

net y-cmp-lte => xor2.1.in0
net y-cmp-op => xor2.1.in1
net y-cmp-op-result <= xor2.1.out  # x-cmp-result = (x-cmp-lte && !x-cmp-op) || (!x-cmp-lte && x-cmp-op)

net y-cmp-op-result => or2.3.in0
net y-cmp-bypass => or2.3.in1
net y-cmp-result <= or2.3.out

net x-cmp-result => and2.1.in0
net y-cmp-result => and2.1.in1
net input-latch <= and2.1.out       # input-latch = x-cmp-result || y-cmp-result

# beam-enable x-current-pos x-target-pos x-cmp-op x-cmp-val input-latch
loadrt sampler depth=256 cfg="bffbfffbfb"
net beam-enable     => sampler.0.pin.0
net x-velocity      => sampler.0.pin.1
net y-velocity      => sampler.0.pin.2
net x-position      => sampler.0.pin.3
net y-position      => sampler.0.pin.4
net x-home          => sampler.0.pin.5
net y-home          => sampler.0.pin.6
net estop-ext       => sampler.0.pin.7

loadrt threads name1="fast-thread" period1=100000, name2="slow-thread" period2=1000000

addf parport.0.read fast-thread
addf stepgen.make-pulses fast-thread
addf charge-pump fast-thread
addf parport.0.write fast-thread
#addf parport.0.reset fast-thread

addf streamer.0                 slow-thread
addf stepgen.capture-position   slow-thread
addf comp.0                     slow-thread
addf comp.1                     slow-thread
addf or2.0                      slow-thread
addf or2.1                      slow-thread
addf or2.2                      slow-thread
addf or2.3                      slow-thread
addf xor2.0                     slow-thread
addf xor2.1                     slow-thread
addf mux2.0                     slow-thread
addf mux2.1                     slow-thread
addf and2.0                     slow-thread
addf and2.1                     slow-thread
addf stepgen.update-freq        slow-thread
addf sampler.0                  slow-thread

start
